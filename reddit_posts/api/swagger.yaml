openapi: 3.0.1
info:
  title: Reddit Hot Posts API
  description: 'Application created to analyze all hot reddit posts'
  version: 0.1.0
servers:
  - url: /api/v1

paths:
  /hot-posts:
    post:
      tags:
        - Hot Posts
      description: 'Lists all the hot posts saved from the database according to the date range passed via json and ordered by number of ups or comments.'
      summary: Hot posts
      operationId: reddit_posts.api.resources.get_hot_posts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchByDate'

      responses:
        200:
          description: Success!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'

        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
              example:
                error: true
                message: '{Error Message}'
                data: []

  /users/{order}:
    get:
      tags:
        - Users
      description: "Lists the sum of comments and ups per user sorted in descending order according to the chosen option: 'ups' or 'comments'"
      summary: Users
      operationId: reddit_posts.api.resources.get_users
      parameters:
        - name: order
          description: "Users descending sort option, valid values ​​are 'ups' or' comments'"
          in: path
          required: true
          schema:
            type: string
            format: path

      responses:
        200:
          description: Success!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
              example:
                error: false
                message: Success!
                data: [{"comments": 16, "ups": 127, "user": "CyberByte"}]
        400:
          description: Index
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
              example:
                error: true
                message: '{Error Message}'
                data: []

components:
  schemas:
    GeneralResponse:
      type: object
      properties:
        error:
          type: boolean
        message:
          type: string
        data:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/RedditPost'
              - $ref: '#/components/schemas/RedditUser'
      required:
        - error
        - message
        - data
      example:
        error: false
        message: 'Success!'
        data: [{"author": t2_3ps7w65l, "author_name": wstcpyt1988, "comments": 1, "created": '2020-06-26T10:00:27Z', "title": 'Support Vector Machines: All you need to know!', "ups": 50}]


    RedditPost:
      type: object
      properties:
        title:
          type: string
        author:
          type: string
        author_name:
          type: string
        created:
          type: string
          format: date-time
        ups:
          type: integer
        comments:
          type: integer
      required:
        - title
        - author
        - author_name
        - created
        - ups
        - comments
      example:
        author: t2_3ps7w65l
        author_name: wstcpyt1988
        comments: 1
        created: '2020-06-26T10:00:27Z'
        title: 'Support Vector Machines: All you need to know!'
        ups: 50


    RedditUser:
      type: object
      properties:
        user:
          type: string
        ups:
          type: integer
        comments:
          type: integer
      required:
        - user
        - ups
        - comments
      example:
        comments: 16
        ups: 127
        user: CyberByte



    SearchByDate:
      type: object
      properties:
        init_date:
          type: string
          pattern: ^([0-2][0-9]|(3)[0-1])(\/)(((0)[0-9])|((1)[0-2]))(\/)\d{4}$
        end_date:
          type: string
          pattern: ^([0-2][0-9]|(3)[0-1])(\/)(((0)[0-9])|((1)[0-2]))(\/)\d{4}$
        order:
          type: string
      required:
        - init_date
        - end_date
        - order
      example:
        init_date: '01/06/2020'
        end_date: '30/06/2020'
        order: 'ups'


